function encrypt() {
  var rawfile = document.getElementById("file")["files"][0];
  var enc_content = "";
  //var password = document.getElementById("password").value
  var password = "admin"
  var lastlength = 0;

  var encfile = ""
  var readerenc = new FileReader()
  readerenc.onload = function (e){
    encfile = new File([e.target.result],rawfile.name)
  }
  readerenc.readAsText(rawfile)

  clearInterval(passwordgenerator);
  $('html').loading({theme: 'dark'})
  var fname_enc = CryptoJS.AES.encrypt(rawfile.name, password).toString();
  var limit = document.getElementById("limit-downloads").value
  var rawfile = document.getElementById("file")["files"][0];
  var reader = new FileReader();
  $.ajax({
    method: "POST",
    url: "/api/upload",
    contentType: "application/json; charset=utf-8",
    data: JSON.stringify({fname:fname_enc,limit:limit}),
    success: function (response){
      var fid = response["fid"]
      onprogress(fid)
      onload(fid)
      //reader.readAsBinaryString(rawfile)
      reader.readAsBinaryString(encfile)
    }
  });

  function onprogress (fid){
    reader.onprogress = function (e){
      console.log(Math.round((e.loaded /1000000))+ "Mb/" + Math.round((e.total/1000000))+"Mb")
      result = e.target.result.slice(lastlength,)
      lastlength = e.target.result.length
      //enc_content = CryptoJS.AES.encrypt(result , password).toString();
      var xhr = new XMLHttpRequest();
      xhr.open("PUT", "/api/upload/"+fid);
      xhr.setRequestHeader("Content-Type", "application/octet-stream");
      //xhr.send(enc_content);
      xhr.send(result);
    }
  }

  function onload(fid){
    reader.onload = function (e) {
      var xhr = new XMLHttpRequest();
      xhr.open("PATCH", "/api/upload/"+fid);
      xhr.send();
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          document.getElementById("url-share").value = location.protocol + "//" + location.host + "/" + fid
          document.getElementById("url-share").type = "text"
          document.getElementById("file-select").style.visibility = "hidden"
          document.getElementById("upload-button").style.visibility = "hidden"
          document.getElementById("limit-downloads").setAttribute("readonly", true)
          $('html').loading('stop')
        }
      }
    }
  }
}

function decrypt(file){
  $('html').loading({theme: 'dark'})
  var password = "admin"
  //var password = document.getElementById("password").value
  var reader = new FileReader();
  var dec_content=""
  var lastlength = 0;
  var fid = document.getElementById("fid").value
  var xhr = new XMLHttpRequest();
  xhr.open("GET", "/api/download/"+fid);
  xhr.send();
  xhr.onprogress = function (e) {
      result = e.target.response.slice(lastlength,)
      lastlength = e.target.response.length
      //dec_content += CryptoJS.AES.decrypt(result , password).toString()
  }
  xhr.onreadystatechange = function(data) {
     dec_content = CryptoJS.AES.decrypt(data, password).toString();
    console.log(dec_content)
    if (xhr.readyState === 4) {
      dec_content = CryptoJS.AES.decrypt(data, password).toString();
      console.log(dec_content)
      download("teste.png",hex2a(dec_content))
      $('html').loading('stop')
    }
  }

}

function download(fname,fcontent){
  console.log("Dowloading...")
  var data = new Blob([fcontent])
  var url = window.URL.createObjectURL(data);
  var element = document.createElement('a');
  element.setAttribute('href', url);
  element.setAttribute('download', fname);
  element.style.display = 'none';
  console.log(element)
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
}

function hex2a(hex){
  var str = '';
  for (var i = 0; i < hex.length; i += 2)
    str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
  return str;
}

//function decrypt(file){
//  var reader = new FileReader();
//  reader.onload = function (e) {
//      var password = document.getElementById("password-to-decrypt").value
//      var fname = CryptoJS.AES.decrypt(file.name, password).toString(CryptoJS.enc.Utf8)
//      var fcontent = CryptoJS.AES.decrypt(e.target.result, password).toString(CryptoJS.enc.Utf8)
//      if (fcontent) {
//        console.log(file.name)
//        console.log(fname)
//        download(fname,fcontent)
//      } else {
//        alert("Unable to decrypt");
//        window.location.href = "/"
//      }
//    }
//  reader.readAsText(file)
//}
